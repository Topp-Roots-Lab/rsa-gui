/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SetCrop.java
 *
 * Created on May 10, 2010, 1:37:47 PM
 */
package org.danforthcenter.genome.rootarch.rsagia.app2;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.geom.AffineTransform;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;
import javax.swing.JLayeredPane;

import org.danforthcenter.genome.rootarch.rsagia2.Crop;
import org.danforthcenter.genome.rootarch.rsagia2.OutputInfo;
import org.danforthcenter.genome.rootarch.rsagia2.RsaImageSet;

/**
 *
 * @author bm93
 */
public class CropRestPanel extends javax.swing.JPanel implements
		java.awt.event.ActionListener {

	protected RsaImageSet gp;
	protected OutputInfo recropi;
	protected ResizableSquare rs;
	protected ImageManipulationFrame imf;
	protected Crop crop;
	protected OutputInfo oi;
	protected int rotation;

	/**
	 *
	 * @param gp
	 * @param p1
	 *            In view coordinates
	 * @param p2
	 *            In view coordinates
	 * @param imf
	 * @param rot
	 * @param r
	 * @param crop
	 * @param oi
	 */
	public CropRestPanel(RsaImageSet gp, OutputInfo recropi, Point p1,
			Point p2, ImageManipulationFrame imf, int rot, Rectangle r,
			Crop crop, OutputInfo oi) {
		initComponents();

		this.gp = gp;
		this.recropi = recropi;
		this.imf = imf;
		this.crop = crop;
		this.oi = oi;

		this.rotation = rot;
		double s = imf.getItp().getZoom();

		p1.x *= s;
		p1.y *= s;
		p2.x *= s;
		p2.y *= s;
		// if (r != null && Math.abs((p2.x - p1.x)/s - r.width) < 0.01)
		// {
		// rs = new ResizableSquare(p1, p2, new Point(p2.x, (int)(p2.y +
		// r.height * s)), new Point(p1.x, (int)(p1.y + r.height * s)), s, s,
		// Color.MAGENTA, 3);
		// }
		// else
		// {
		rs = new ResizableSquare(p1, p2, new Point(p2.x, p2.y + 50), new Point(
				p1.x, p1.y + 50), s, s, Color.MAGENTA, 3);
		System.out.println("rs:" + rs.toString());
		// }
		rs.addMouseListener(rs);
		rs.setTopLocked(true);
		nextButton.addActionListener(this);
		backButton.addActionListener(this);
		imf.getMip().add(rs, new Integer(JLayeredPane.PALETTE_LAYER));
		imf.getMip().revalidate();

		Dimension d = imf.getMip().getPreferredSize();
		System.out
				.println("old dimension:" + d.toString() + ";rotation=" + rot);
			if (rot == 1 || rot == 3) {
				int i = d.height;
				d.height = d.width;
				d.width = i;
			}
		BufferedImage bi = scaleAndLoad(crop.getThumbnail(oi), s, d);

		imf.getItp().getLockTopButton().setVisible(true);
		imf.getItp().getLockTopButton().addActionListener(this);

		imf.getMip().setImage(bi);
		System.out.println("new dimension:"
				+ imf.getMip().getPreferredSize().toString());
		imf.getMip().setFocus(rs);
		imf.setAppPanel(this);
		if (crop.getRecrop()) {
			imf.setTitle(recropi.toString());
		} else {
			imf.setTitle(gp.toString());
		}
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jLabel1 = new javax.swing.JLabel();
		nextButton = new javax.swing.JButton();
		backButton = new javax.swing.JButton();

		setBorder(javax.swing.BorderFactory.createTitledBorder(
				javax.swing.BorderFactory.createLineBorder(new java.awt.Color(
						0, 0, 0)), "Step 3: Set Rest of Crop"));

		jLabel1.setText("Click and drag the rectangle over region to crop (the top will not move).");

		nextButton.setText("Next");

		backButton.setText("Back");

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		this.setLayout(layout);
		layout.setHorizontalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup().addGap(27, 27, 27)
								.addComponent(jLabel1)
								.addContainerGap(209, Short.MAX_VALUE))
				.addGroup(
						javax.swing.GroupLayout.Alignment.TRAILING,
						layout.createSequentialGroup()
								.addContainerGap(482, Short.MAX_VALUE)
								.addComponent(backButton,
										javax.swing.GroupLayout.PREFERRED_SIZE,
										90,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addGap(18, 18, 18)
								.addComponent(nextButton,
										javax.swing.GroupLayout.PREFERRED_SIZE,
										89,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addContainerGap()));
		layout.setVerticalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addContainerGap(20, Short.MAX_VALUE)
								.addComponent(jLabel1)
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(nextButton)
												.addComponent(backButton))));
	}// </editor-fold>//GEN-END:initComponents
		// Variables declaration - do not modify//GEN-BEGIN:variables

	private javax.swing.JButton backButton;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JButton nextButton;

	// End of variables declaration//GEN-END:variables

	protected BufferedImage scaleAndLoad(File f, double s, Dimension d) {
		BufferedImage ans = null;
		try {
			BufferedImage bi = ImageIO.read(f);
			// AffineTransform at = new AffineTransform();
			// at.rotate((rot))
			Dimension d2 = new Dimension(bi.getWidth(), bi.getHeight());
			AffineTransform at = new AffineTransform();
			at.scale(d.getWidth() / s / d2.getWidth(),
					d.getHeight() / s / d2.getHeight());
			ans = new BufferedImage((int) (d.getWidth() / s),
					(int) (d.getHeight() / s), BufferedImage.TYPE_INT_ARGB);
			Graphics2D g2d = ans.createGraphics();
			g2d.drawImage(bi, at, null);
		} catch (IOException e) {
			e.printStackTrace();
		}

		return ans;
	}

	public Rectangle getRectangle() {
		return rs.getRectangle();
	}

	public void actionPerformed(ActionEvent e) {
		if (e.getSource() == nextButton) {
			imf.remove(this);
			imf.getMip().remove(rs);
			imf.getItp().getLockTopButton().setVisible(false);
			imf.getItp().getLockTopButton().removeActionListener(this);
			firePropertyChange("done", new Boolean(false), new Boolean(true));
			// RsaImageSetMetaData rism = new RsaImageSetMetaData(gp.getRis());
			// rism.load(gp.getOutputDir());
			// rism.writeCrop(rs.getRectangle(), rotation, gp.getOutputDir());
			// callback.setCropDone(rs.getRectangle());
		} else if (e.getSource() == imf.getItp().getLockTopButton()) {
			rs.setTopLocked(imf.getItp().getLockTopButton().isSelected());
		} else if (e.getSource() == backButton) {
			imf.remove(this);
			imf.getMip().remove(rs);
			imf.getItp().getLockTopButton().setVisible(false);
			imf.getItp().getLockTopButton().removeActionListener(this);
			firePropertyChange("back", new Boolean(false), new Boolean(true));
		}

	}
}
