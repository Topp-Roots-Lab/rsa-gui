/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SetTopCropPanel.java
 *
 * Created on May 10, 2010, 1:31:48 PM
 */

package org.danforthcenter.genome.rootarch.rsagia.app2;

import java.awt.Color;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.File;

import javax.swing.JLayeredPane;
import javax.swing.JOptionPane;

import org.danforthcenter.genome.rootarch.rsagia2.Crop;
import org.danforthcenter.genome.rootarch.rsagia2.ExtensionFileFilter;
import org.danforthcenter.genome.rootarch.rsagia2.OutputInfo;
import org.danforthcenter.genome.rootarch.rsagia2.RsaImageSet;

/**
 *
 * @author bm93
 */
public class CropTopPanel extends javax.swing.JPanel implements ActionListener,
		MouseListener {

	protected ImageManipulationFrame imf;
	protected Crop crop;
	protected RsaImageSet ris;
	protected OutputInfo oi;
	protected ResizableLine rl;
	protected int rot;

	/** Creates new form SetTopCropPanel */
	public CropTopPanel(ImageManipulationFrame imf, Crop crop, RsaImageSet ris,
			OutputInfo recropi, OutputInfo oi, Rectangle rect, int rot) {
		initComponents();

		this.imf = imf;

		imf.getMip().addMouseListener(this);
		imf.setAppPanel(this);

		ExtensionFileFilter eff = null;
		if (crop.getRecrop()) {
			// based on the oi
			// hard coded for the time being:
			String PreferredType = "tiff";
			eff = new ExtensionFileFilter(PreferredType);
			// the crop images are in the "images" folder
			File cropimgdir = new File(recropi.getDir() + File.separator
					+ "images");
			imf.getMip().setImage(cropimgdir.listFiles(eff)[0]);
			imf.setTitle(recropi.toString());
			// index=0 corresponds to 100% - the already cropped images
			// are smaller,so increase scale
			imf.getItp().getZoomComboBox().setSelectedIndex(3);
		} else {
			// based on the ris
			eff = new ExtensionFileFilter(ris.getPreferredType());
			imf.getMip().setImage(ris.getPreferredInputDir().listFiles(eff)[0]);
			imf.setTitle(ris.toString());
		}
		double s = imf.getItp().getZoom();
		imf.getMip().setScale(s, s);
		rl = null;
		this.rot = 0;

		if (rect != null) {
			this.rot = rot;
			imf.getMip().setRotation(rot);

			double s2 = imf.getItp().getZoom();
			rl = new ResizableLine(new Point((int) (rect.x * s2),
					(int) (rect.y * s2)), new Point(
					(int) ((rect.x + rect.width) * s2), (int) (rect.y * s2)),
					Color.MAGENTA, 3, s2, s2);
			System.out.println("rl: " + rl.toString());
			rl.setOrthOnly(true);
			rl.addMouseListener(rl);
			imf.getMip().add(rl, new Integer(JLayeredPane.PALETTE_LAYER));
			imf.getMip().setFocus(rl);
			imf.getMip().revalidate();
		}

		rotLeftButton.addActionListener(this);
		rotRightButton.addActionListener(this);
		nextButton.addActionListener(this);
	}

	public CropTopPanel(ImageManipulationFrame imf, Crop crop, RsaImageSet ris,
			OutputInfo recropi, OutputInfo oi) {
		this(imf, crop, ris, recropi, oi, null, -1);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		rotLeftButton = new javax.swing.JButton();
		rotRightButton = new javax.swing.JButton();
		jLabel1 = new javax.swing.JLabel();
		jLabel2 = new javax.swing.JLabel();
		nextButton = new javax.swing.JButton();

		setBorder(javax.swing.BorderFactory.createTitledBorder(
				javax.swing.BorderFactory.createLineBorder(new java.awt.Color(
						0, 0, 0)), "Step 2: Rotate and Set Top Crop"));

		rotLeftButton.setText("<< 90 Left");

		rotRightButton.setText("90 Right >>");

		jLabel1.setText("Rotate if needed:");

		jLabel2.setText("and draw top crop line.");

		nextButton.setText("Next...");

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		this.setLayout(layout);
		layout.setHorizontalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addContainerGap()
								.addComponent(jLabel1)
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(rotLeftButton)
								.addGap(18, 18, 18)
								.addComponent(rotRightButton)
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.TRAILING)
												.addGroup(
														layout.createSequentialGroup()
																.addGap(18, 18,
																		18)
																.addComponent(
																		jLabel2)
																.addContainerGap(
																		265,
																		Short.MAX_VALUE))
												.addGroup(
														layout.createSequentialGroup()
																.addPreferredGap(
																		javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																.addComponent(
																		nextButton,
																		javax.swing.GroupLayout.PREFERRED_SIZE,
																		86,
																		javax.swing.GroupLayout.PREFERRED_SIZE)
																.addContainerGap()))));
		layout.setVerticalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addContainerGap()
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(rotLeftButton)
												.addComponent(rotRightButton)
												.addComponent(jLabel1)
												.addComponent(jLabel2))
								.addContainerGap(36, Short.MAX_VALUE))
				.addGroup(
						javax.swing.GroupLayout.Alignment.TRAILING,
						layout.createSequentialGroup()
								.addContainerGap(36, Short.MAX_VALUE)
								.addComponent(nextButton).addContainerGap()));
	}// </editor-fold>//GEN-END:initComponents

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JButton nextButton;
	private javax.swing.JButton rotLeftButton;
	private javax.swing.JButton rotRightButton;

	// End of variables declaration//GEN-END:variables

	public void mouseReleased(MouseEvent e) {
		// throw new UnsupportedOperationException("Not supported yet.");
	}

	public void mousePressed(MouseEvent e) {
		// System.out.println("MOUSE PRESSED!!!");
		if (e.getSource() == imf.getMip()) {
			if (rl == null) {
				Point p = e.getPoint();
				double s = imf.getItp().getZoom();
				rl = new ResizableLine(p, new Point(p.x + 100, p.y),
						Color.MAGENTA, 3, s, s);
				rl.setOrthOnly(true);
				rl.addMouseListener(rl);
				imf.getMip().add(rl, new Integer(JLayeredPane.PALETTE_LAYER));
				imf.getMip().setFocus(rl);
				imf.getMip().revalidate();

				// rl.
			}
		}
		// throw new UnsupportedOperationException("Not supported yet.");
	}

	public void mouseExited(MouseEvent e) {
		// throw new UnsupportedOperationException("Not supported yet.");
	}

	public void mouseEntered(MouseEvent e) {
		// throw new UnsupportedOperationException("Not supported yet.");
	}

	public void mouseClicked(MouseEvent e) {

		// throw new UnsupportedOperationException("Not supported yet.");
	}

	public void actionPerformed(ActionEvent e) {
		if (e.getSource() == rotLeftButton) {
			rot = incRot(rot, -1);
			imf.getMip().setRotation(rot);
		} else if (e.getSource() == rotRightButton) {
			rot = incRot(rot, 1);
			imf.getMip().setRotation(rot);
		} else if (e.getSource() == nextButton) {
			if (rl == null) {
				JOptionPane
						.showMessageDialog(this, "Please set top crop line.");
			} else {
				imf.remove(this);
				imf.getMip().remove(rl);
				imf.getMip().removeMouseListener(this);

				firePropertyChange("done", new Boolean(false),
						new Boolean(true));
			}
		}
	}

	public int getRot() {
		return rot;
	}

	public Point getViewPoint1() {
		return rl.getP1();
	}

	public Point getViewPoint2() {
		return rl.getP2();
	}

	protected Point rotatePoint(Point p) {
		// if (rot == 1 || rot == 3)
		// {
		// int t = p.y;
		// p.y = p.x;
		// p.x = t;
		// }

		return p;
	}

	/**
	 * In image coordinates (NOT VIEW)
	 * 
	 * @return
	 */
	public Point getPoint1() {
		Point p1 = (Point) rl.getP1().clone();
		p1.x /= imf.getItp().getZoom();
		p1.y /= imf.getItp().getZoom();
		return rotatePoint(p1);
	}

	/**
	 * In image coordinates (NOT VIEW)
	 * 
	 * @return
	 */
	public Point getPoint2() {
		Point p2 = (Point) rl.getP2().clone();
		p2.x /= imf.getItp().getZoom();
		p2.y /= imf.getItp().getZoom();

		return rotatePoint(p2);
	}

	protected int incRot(int r1, int r2) {
		int ans = r1 + r2;
		ans = (ans < 0) ? 3 : ans;
		ans = (ans > 3) ? 0 : ans;

		return ans;
	}

}
