/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 *
 * Created on Jul 1, 2010, 12:21:54 PM
 */

package org.danforthcenter.genome.rootarch.rsagia.app2;

import java.awt.BorderLayout;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.util.ArrayList;
import java.util.HashMap;

import javax.swing.JOptionPane;
import javax.swing.JPanel;

import org.danforthcenter.genome.rootarch.rsagia2.ApplicationManager;
import org.danforthcenter.genome.rootarch.rsagia2.OutputInfo;
import org.danforthcenter.genome.rootarch.rsagia2.RsaImageSet;

/**
 * This is a generic multi-purpose frame for reviewing and choosing outputs from
 * a RsaImageSet. This is customized by setting the title, infoLabel, the action
 * listener for nextButton, the original list of image sets and outputs, and a
 * window listener for the close event.
 * 
 * @author bm93
 */
public class ChooseOutputFrame extends javax.swing.JFrame implements
		java.awt.event.ActionListener {
	protected HashMap<RsaImageSet, ArrayList<OutputInfo>> originalMap;
	protected boolean oneOutputOnly;
	protected ChooseOutputPanel2 cop;
	protected boolean skipCheckFinallist = true;

	/** Creates new form Review Frame */
	public ChooseOutputFrame(HashMap<RsaImageSet, ArrayList<OutputInfo>> map,
			boolean oneOutputOnly, ApplicationManager am, boolean moveSingles,
			boolean skipCheckFinallist) {

		this.oneOutputOnly = oneOutputOnly;

		initComponents();

		this.setLayout(new BorderLayout());
		this.add(textLabel, BorderLayout.NORTH);
		cop = new ChooseOutputPanel2(map, oneOutputOnly, am, moveSingles);
		copPanel.setLayout(new BorderLayout());
		JPanel jp = new JPanel(new BorderLayout());
		jp.add(cop, BorderLayout.CENTER);
		copPanel.add(jp, BorderLayout.CENTER);
		JPanel jp2 = new JPanel(new FlowLayout());
		jp2.add(nextButton);
		jp2.add(cancelButton);
		copPanel.add(jp2, BorderLayout.SOUTH);

		this.getContentPane().add(copPanel, BorderLayout.CENTER);

		// Dimension dim = copPanel.preferredSize();
		// copPanel.setPreferredSize(copPanel.preferredSize());

		// it was before
		// copPanel.add(cop);
		copPanel.revalidate();

		this.nextButton.addActionListener(this);
		this.cancelButton.addActionListener(this);
		this.skipCheckFinallist = skipCheckFinallist;

		this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
	}

	public void actionPerformed(ActionEvent e) {
		if (e.getSource().equals(nextButton)) {
			ArrayList<OutputInfo> flist = cop.getFinalOutputs();
			if (!flist.isEmpty() || skipCheckFinallist) {
				firePropertyChange("done", false, true);
			} else {
				String ErrMsg = "The list on the right should not be empty.\n"
						+ "Choose some options and try again.\n";
				JOptionPane.showMessageDialog(this, ErrMsg);
			}
		} else if (e.getSource() == cancelButton) {
			// TODO: clean up first if needed
			cancel();

			// close this window
			closeWindow();
		}
	}

	public void setInfoText(String msg) {
		this.textLabel.setText(msg);
	}

	public ArrayList<OutputInfo> getOutputs() {
		return cop.getFinalOutputs();
	}

	public boolean getOneOutputOnly() {
		return oneOutputOnly;
	}

	private void cancel() {
		// TODO: clean up
	}

	private void closeWindow() {
		dispose();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		textLabel = new javax.swing.JLabel();
		copPanel = new javax.swing.JPanel();
		nextButton = new javax.swing.JButton();
		cancelButton = new javax.swing.JButton();

		setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

		textLabel.setText("Choose one of the following:");

		nextButton.setText("Next");

		cancelButton.setText("Cancel");

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(
				getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addContainerGap()
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.LEADING)
												.addComponent(
														copPanel,
														javax.swing.GroupLayout.PREFERRED_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.PREFERRED_SIZE)
												.addComponent(textLabel))
								.addContainerGap(672, Short.MAX_VALUE))
				.addGroup(
						javax.swing.GroupLayout.Alignment.TRAILING,
						layout.createSequentialGroup()
								.addContainerGap(676, Short.MAX_VALUE)
								.addComponent(nextButton,
										javax.swing.GroupLayout.PREFERRED_SIZE,
										85,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(cancelButton,
										javax.swing.GroupLayout.PREFERRED_SIZE,
										85,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addContainerGap()));
		layout.setVerticalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addContainerGap()
								.addComponent(textLabel)
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(copPanel,
										javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED,
										308, Short.MAX_VALUE)
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(nextButton)
												.addComponent(cancelButton))
								.addContainerGap()));

		pack();
	}// </editor-fold>//GEN-END:initComponents

	/**
	 * @param args
	 *            the command line arguments
	 */
	// public static void main(String args[]) {
	// java.awt.EventQueue.invokeLater(new Runnable() {
	// public void run() {
	// File f = new File("./test-resources/gui-tmp/rsa");
	// SimpleSecurityManager ssm = new SimpleSecurityManager("a=rwX", "staff",
	// "ug=rw,o=r", "staff");
	// Crop crop = new Crop();
	// Scale scale = new Scale();
	// GiaRoot2D gia = new GiaRoot2D(new File("./test-resources/templates"),
	// "/scratch/gia/interpreter", new File("/scratch/gia"),
	// "averagerootwidthfeaturevalue;bushinessfeaturevalue");
	// Export export = new Export(null, scale, gia);
	// ApplicationManager am = new ApplicationManager(ssm, scale, crop, gia,
	// export, null);
	//
	// ArrayList<RsaImageSet> riss = RsaImageSet.getAll(f,ssm);
	// HashMap<RsaImageSet,ArrayList<OutputInfo>> map = new
	// HashMap<RsaImageSet,ArrayList<OutputInfo>>();
	// for (RsaImageSet r : riss)
	// {
	//
	// ArrayList<OutputInfo> ois = new ArrayList<OutputInfo>();
	// File[] fs = am.getSandboxDirectories(r);
	// if (fs != null)
	// {
	// for (File f2 : fs)
	// {
	// OutputInfo oi = OutputInfo.getInstance(f2, am, r);
	// if (oi != null)
	// {
	// ois.add(oi);
	// }
	// }
	// }
	//
	// map.put(r, ois);
	// }
	// new ChooseOutputFrame(map, false, am, false).setVisible(true);
	// }
	// });
	// }

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton cancelButton;
	private javax.swing.JPanel copPanel;
	private javax.swing.JButton nextButton;
	private javax.swing.JLabel textLabel;
	// End of variables declaration//GEN-END:variables

}
