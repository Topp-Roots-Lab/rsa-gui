/*
 *  Copyright 2011 vp23.
 * 
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 * 
 *       http://www.apache.org/licenses/LICENSE-2.0
 * 
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  under the License.
 */

/*
 * SelectQcOutputFrame.java
 *
 * Created on Dec 5, 2011, 2:26:30 PM
 */

package org.danforthcenter.genome.rootarch.rsagia.app2;

import java.awt.event.ActionEvent;
import java.util.TreeMap;

import javax.swing.JCheckBox;
import javax.swing.JOptionPane;

/**
 *
 * @author vp23
 */
public class ExportDispatcherFrame extends javax.swing.JFrame implements
		java.awt.event.ActionListener {

	private static int scaleQc = 0;

	private static int giaroot_2d = 0;
	private static int giaroot_3d = 0;
	private static int gia3d_v2 = 0;
	private static int qc2 = 0;
	private static int qc3 = 0;
	private static int select_scale = 0;

	/** Creates new form SelectQcOutputFrame */
	public ExportDispatcherFrame() {
		initComponents();

		// hide select_scale for now
		jCheckBox5.setVisible(false);

		// default
		giaroot_2d = 1;
		select_scale = 1;

		this.nextButton.addActionListener(this);
		this.cancelButton.addActionListener(this);
		this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
	}

	public void actionPerformed(ActionEvent e) {
		if (e.getSource().equals(nextButton)) {
			if (!verifyParams()) {
				return;
			}
			//
			firePropertyChange("done", false, true);
		} else if (e.getSource() == cancelButton) {
			// TODO: clean up first if needed
			cancel();

			// close this window
			closeWindow();
		}
	}

	public void setInfoText(String msg) {
		this.textLabel.setText(msg);
	}

	private boolean verifyParams() {
		boolean ret = false;
		String ErrMsg = "";

		boolean IfCheckBoxes = jCheckBox1.isSelected()
				|| jCheckBox2.isSelected()
				|| jCheckBox4.isSelected() || jCheckBox7.isSelected()
				|| jCheckBox8.isSelected();

		if (!IfCheckBoxes) {
			ErrMsg = "* Choose at least one Export option\n";
		}

		if (!IfCheckBoxes) {

			ErrMsg = "Correct the following input parameter(s) and try again:\n"
					+ ErrMsg;
			JOptionPane.showMessageDialog(this, ErrMsg);
			return false;
		}

		return true;
	}

	private void cancel() {
		// TODO: clean up
	}

	private void closeWindow() {
		dispose();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		textLabel = new javax.swing.JLabel();
		nextButton = new javax.swing.JButton();
		jCheckBox1 = new javax.swing.JCheckBox();
		jCheckBox2 = new javax.swing.JCheckBox();
		jCheckBox4 = new javax.swing.JCheckBox();
		jCheckBox5 = new javax.swing.JCheckBox();
		cancelButton = new javax.swing.JButton();
		jCheckBox7 = new javax.swing.JCheckBox();
		jCheckBox8 = new javax.swing.JCheckBox();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		setTitle("Export Options");

		textLabel.setText("Select Export options:");

		nextButton.setText("Next");

		jCheckBox1.setSelected(true);
		jCheckBox1.setText("giaroot_2d");
		jCheckBox1.setActionCommand("giaRoot2D");
		jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jCheckBox1ActionPerformed(evt);
			}
		});

		jCheckBox2.setText("giaroot_3d");
		jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jCheckBox2ActionPerformed(evt);
			}
		});

		jCheckBox4.setText("gia3d_v2");
		jCheckBox4.setActionCommand("gia3D_v2");
		jCheckBox4.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jCheckBox4ActionPerformed(evt);
			}
		});

		jCheckBox5.setSelected(true);
		jCheckBox5.setText("scale selection");
		jCheckBox5.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jCheckBox5ActionPerformed(evt);
			}
		});

		cancelButton.setText("Cancel");

		jCheckBox7.setText("qc2");
		jCheckBox7.setActionCommand("qc2");
		jCheckBox7.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jCheckBox7ActionPerformed(evt);
			}
		});

		jCheckBox8.setText("qc3");
		jCheckBox8.setActionCommand("qc3");
		jCheckBox8.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jCheckBox8ActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(
				getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.LEADING)
												.addGroup(
														layout.createSequentialGroup()
																.addContainerGap()
																.addComponent(
																		textLabel))
												.addGroup(
														layout.createSequentialGroup()
																.addGap(59, 59,
																		59)
																.addGroup(
																		layout.createParallelGroup(
																				javax.swing.GroupLayout.Alignment.LEADING)
																				.addComponent(
																						jCheckBox4)
																				.addGroup(
																						layout.createParallelGroup(
																								javax.swing.GroupLayout.Alignment.TRAILING)
																								.addComponent(
																										jCheckBox2)
																								.addComponent(
																										jCheckBox1))
																				.addComponent(
																						jCheckBox5)
																				.addComponent(
																						jCheckBox7)
																				.addComponent(
																						jCheckBox8)))
												.addGroup(
														layout.createSequentialGroup()
																.addGap(28, 28,
																		28)
																.addComponent(
																		nextButton,
																		javax.swing.GroupLayout.PREFERRED_SIZE,
																		105,
																		javax.swing.GroupLayout.PREFERRED_SIZE)
																.addGap(18, 18,
																		18)
																.addComponent(
																		cancelButton,
																		javax.swing.GroupLayout.PREFERRED_SIZE,
																		105,
																		javax.swing.GroupLayout.PREFERRED_SIZE)))
								.addContainerGap(43, Short.MAX_VALUE)));
		layout.setVerticalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addContainerGap()
								.addComponent(textLabel)
								.addGap(18, 18, 18)
								.addComponent(jCheckBox1)
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(jCheckBox2)
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(jCheckBox4)
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(jCheckBox7)
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(jCheckBox8)
								.addGap(23, 23, 23)
								.addComponent(jCheckBox5)
								.addGap(30, 30, 30)
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(nextButton)
												.addComponent(cancelButton))
								.addContainerGap(38, Short.MAX_VALUE)));

		pack();
	}// </editor-fold>//GEN-END:initComponents

	private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jCheckBox1ActionPerformed
		giaroot_2d = getCheckBoxValue(evt);
	}// GEN-LAST:event_jCheckBox1ActionPerformed

	private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jCheckBox2ActionPerformed
		giaroot_3d = getCheckBoxValue(evt);
	}// GEN-LAST:event_jCheckBox2ActionPerformed

	private void jCheckBox4ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jCheckBox4ActionPerformed
		gia3d_v2 = getCheckBoxValue(evt);
	}// GEN-LAST:event_jCheckBox4ActionPerformed

	private void jCheckBox5ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jCheckBox5ActionPerformed
		select_scale = getCheckBoxValue(evt);
	}// GEN-LAST:event_jCheckBox5ActionPerformed

	private void jCheckBox7ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jCheckBox7ActionPerformed
		qc2 = getCheckBoxValue(evt);
	}// GEN-LAST:event_jCheckBox7ActionPerformed

	private void jCheckBox8ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jCheckBox8ActionPerformed
		qc3 = getCheckBoxValue(evt);
	}// GEN-LAST:event_jCheckBox8ActionPerformed

	private int getCheckBoxValue(java.awt.event.ActionEvent evt) {
		int value = -1;
		JCheckBox chbx = (JCheckBox) evt.getSource();
		if (chbx.isSelected()) {
			value = 1;
		} else {
			value = 0;
		}

		return value;
	}

	public static TreeMap<String, Boolean> getOptions() {

		TreeMap<String, Boolean> options = new TreeMap<>();

		if (Integer.valueOf(giaroot_2d) > 0)
			options.put("giaroot_2d", true);
		if (Integer.valueOf(giaroot_3d) > 0)
			options.put("giaroot_3d", true);
		if (Integer.valueOf(gia3d_v2) > 0)
			options.put("gia3d_v2", true);
		if (Integer.valueOf(qc2) > 0)
			options.put("qc2", true);
		if (Integer.valueOf(qc3) > 0)
			options.put("qc3", true);

		if (!options.containsKey("giaroot_2d")
				&& !options.containsKey("giaroot_3d")
				&& !options.containsKey("gia3d_v2")) {

			// indicate that there is no need for Scale screen
			select_scale = 0;
		}

		options.put("select_scale", (Integer.valueOf(select_scale) > 0) ? true
				: false);

		return options;
	}

	public static void resetOptions() {
		giaroot_2d = 1;
		giaroot_3d = 0;
		gia3d_v2 = 0;
		qc2 = 0;
		qc3 = 0;
		select_scale = 1;
	}

	public static int getScaleQc() {

		return scaleQc;
	}

	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new ExportDispatcherFrame().setVisible(true);
			}
		});
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton cancelButton;
	private javax.swing.JCheckBox jCheckBox1;
	private javax.swing.JCheckBox jCheckBox2;
	private javax.swing.JCheckBox jCheckBox4;
	private javax.swing.JCheckBox jCheckBox5;
	private javax.swing.JCheckBox jCheckBox7;
	private javax.swing.JCheckBox jCheckBox8;
	private javax.swing.JButton nextButton;
	private javax.swing.JLabel textLabel;
	// End of variables declaration//GEN-END:variables

}
