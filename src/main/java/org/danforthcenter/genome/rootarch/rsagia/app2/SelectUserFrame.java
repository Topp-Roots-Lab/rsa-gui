package org.danforthcenter.genome.rootarch.rsagia.app2;

import org.danforthcenter.genome.rootarch.rsagia.db.enums.UserAccessLevel;
import org.danforthcenter.genome.rootarch.rsagia.dbfunctions.UserDBFunctions;
import org.danforthcenter.genome.rootarch.rsagia2.UserAccess;
import org.jooq.Record;
import org.jooq.Result;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;

public class SelectUserFrame extends JDialog implements ActionListener, PropertyChangeListener {
    private JComboBox userComboBox;
    private JButton viewButton;
    private JButton editButton;
    private JPanel panel1;
    private JCheckBox activeUsersCheckBox;
    private UserDBFunctions udf;
    private String selectedUser;

    public SelectUserFrame() {
        super(null, "Select User", ModalityType.APPLICATION_MODAL);
        $$$setupUI$$$();
        this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        this.getContentPane().add(this.panel1);

        activeUsersCheckBox.setSelected(true);
        activeUsersCheckBox.addActionListener(this);
        viewButton.addActionListener(this);
        editButton.addActionListener(this);
        this.udf = new UserDBFunctions();

        loadUsers();

        userComboBox.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                if (e.getStateChange() == ItemEvent.SELECTED) {
                    selectedUser = (String) e.getItem();
                }
            }
        });
    }

    public void loadUsers() {
        DefaultComboBoxModel users = new DefaultComboBoxModel();
        Result<Record> userRecord;
        if (activeUsersCheckBox.isSelected()) {
            userRecord = this.udf.getActiveUsers();
        } else {
            userRecord = this.udf.getAllUsers();
        }
        for (Record r : userRecord) {
            users.addElement((String) r.getValue("user_name"));
        }
        selectedUser = (String) users.getElementAt(0);
        userComboBox.setModel(users);
        pack();
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == this.viewButton) {
            if (selectedUser != null) {
                ViewUserFrame vuf = new ViewUserFrame(selectedUser);
                vuf.setLocationRelativeTo(null);
                vuf.setVisible(true);
            } else {
                JOptionPane.showMessageDialog(null, "You don't have a user to view.", null, JOptionPane.ERROR_MESSAGE);
            }
        } else if (e.getSource() == this.editButton) {
            if (selectedUser != null) {
                if (UserAccess.getCurrentAccessLevel() == UserAccessLevel.Admin) {
                    EditUserFrame euf = new EditUserFrame(selectedUser);
                    euf.addPropertyChangeListener(this);
                    euf.setLocationRelativeTo(null);
                    euf.setVisible(true);
                } else {
                    JOptionPane.showMessageDialog(null, "You don't have the permission to edit user.", null, JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(null, "You don't have a user to edit.", null, JOptionPane.ERROR_MESSAGE);
            }
        } else if (e.getSource() == this.activeUsersCheckBox) {
            loadUsers();
        }
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if (evt.getPropertyName().equals("getall")) {
            loadUsers();
        }
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new GridBagLayout());
        panel1.setPreferredSize(new Dimension(300, 150));
        final JLabel label1 = new JLabel();
        label1.setText("Select User:");
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(10, 0, 10, 0);
        panel1.add(label1, gbc);
        userComboBox = new JComboBox();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 1;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel1.add(userComboBox, gbc);
        viewButton = new JButton();
        viewButton.setText("View");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.anchor = GridBagConstraints.EAST;
        gbc.insets = new Insets(10, 0, 10, 10);
        panel1.add(viewButton, gbc);
        editButton = new JButton();
        editButton.setText("Edit");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 2;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel1.add(editButton, gbc);
        final JLabel label2 = new JLabel();
        label2.setText("Only active users:");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(10, 0, 10, 10);
        panel1.add(label2, gbc);
        activeUsersCheckBox = new JCheckBox();
        activeUsersCheckBox.setText("");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        panel1.add(activeUsersCheckBox, gbc);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }

}
