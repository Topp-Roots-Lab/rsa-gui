/*
 *  Copyright 2011 vp23.
 * 
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 * 
 *       http://www.apache.org/licenses/LICENSE-2.0
 * 
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  under the License.
 */

/*
 * SelectQcOutputFrame.java
 *
 * Created on Dec 5, 2011, 2:26:30 PM
 */

package org.danforthcenter.genome.rootarch.rsagia.app2;

import java.awt.event.ActionEvent;
import java.util.ArrayList;

import javax.swing.JCheckBox;
import javax.swing.JOptionPane;

/**
 *
 * @author vp23
 */
public class SelectQcOutputFrame extends javax.swing.JFrame implements
		java.awt.event.ActionListener {

	private static int scaleQc = 0;

	private static int cropped_img_composite = 0;
	private static int gray_img_composite = 0;
	private static int thresholded_img_composite = 0;
	private static int skeleton_img_composite = 0;
	private static int thresholded_cropped_overlay = 0;
	private static int thresholded_gray_overlay = 0;
	private static int skeleton_cropped_overlay = 0;
	private static int skeleton_gray_overlay = 0;
	private static int skeleton_thresholded = 0;

	/** Creates new form SelectQcOutputFrame */
	public SelectQcOutputFrame() {
		initComponents();

		// default
		cropped_img_composite = 1;
		//
		// for the time being until the libraries for QC python script are fixed
		//
		// We have two servers bio-busch and bio-ross.
		// We give a notification that ALL qc options are available only on
		// bio-ross
		//
		// So, on every other server except for bio-busch, we suggest that
		// all options are supported by the proper Python libraries
		// installation.
		//
		String Msg = "";
		// String hostname = null;
		String hostname = "TEST_VIRTUAL_MACHINE";
		// try{
		// hostname = ApplicationFrameManager.getHostName();
		// }
		// catch(UnknownHostException e){
		// Msg = e.getMessage();
		// JOptionPane.showMessageDialog(this, Msg);
		// }

		if (hostname != null
				&& hostname.equalsIgnoreCase("bio-busch.biology.duke.edu")) {
			Msg = "QC feature not fully supported "
					+ "on bio-busch.biology.duke.edu \n "
					+ "Use bio-ross.biology.duke.edu instead.";
			JOptionPane.showMessageDialog(this, Msg);
			disableCheckBoxes();
		}

		this.nextButton.addActionListener(this);
		this.cancelButton.addActionListener(this);
		this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
	}

	public void actionPerformed(ActionEvent e) {
		if (e.getSource().equals(nextButton)) {
			if (!verifyParams()) {
				return;
			}
			;
			//
			// set scale before leaving for future usage
			setScale();
			//
			firePropertyChange("done", false, true);
		} else if (e.getSource() == cancelButton) {
			// TODO: clean up first if needed
			cancel();

			// close this window
			closeWindow();
		}
	}

	public void setInfoText(String msg) {
		this.textLabel.setText(msg);
	}

	private void setScale() {
		scaleQc = Integer.parseInt(scaleQcTextField.getText());
	}

	private void disableCheckBoxes() {
		jCheckBox5.setEnabled(false);
		jCheckBox6.setEnabled(false);
		jCheckBox7.setEnabled(false);
		jCheckBox8.setEnabled(false);
		jCheckBox9.setEnabled(false);
	}

	private boolean verifyParams() {
		boolean ret = false;
		String ErrMsg = "";

		boolean IfCheckBoxes = jCheckBox1.isSelected()
				|| jCheckBox2.isSelected() || jCheckBox3.isSelected()
				|| jCheckBox4.isSelected() || jCheckBox5.isSelected()
				|| jCheckBox6.isSelected() || jCheckBox7.isSelected()
				|| jCheckBox8.isSelected() || jCheckBox9.isSelected();

		if (!IfCheckBoxes) {
			ErrMsg = "* Choose at least one Quality Control option\n";
		}

		boolean IfScaleQc = ifPosInteger(scaleQcTextField.getText());

		if (!IfScaleQc) {
			ErrMsg = ErrMsg + "* Scale should be a positive integer\n";
		}

		if (!IfCheckBoxes || !IfScaleQc) {

			ErrMsg = "Correct the following input parameter(s) and try again:\n"
					+ ErrMsg;
			JOptionPane.showMessageDialog(this, ErrMsg);
			return false;
		}

		return true;
	}

	private boolean ifPosInteger(String value) {
		boolean ret = false;
		try {
			int i = Integer.parseInt(value);
			if (i > 0)
				ret = true;
		} catch (NumberFormatException ex) {

		}
		return ret;
	}

	private void cancel() {
		// TODO: clean up
	}

	private void closeWindow() {
		dispose();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		textLabel = new javax.swing.JLabel();
		nextButton = new javax.swing.JButton();
		jCheckBox1 = new javax.swing.JCheckBox();
		jCheckBox2 = new javax.swing.JCheckBox();
		jCheckBox3 = new javax.swing.JCheckBox();
		jCheckBox4 = new javax.swing.JCheckBox();
		jCheckBox5 = new javax.swing.JCheckBox();
		jCheckBox6 = new javax.swing.JCheckBox();
		jCheckBox7 = new javax.swing.JCheckBox();
		jCheckBox8 = new javax.swing.JCheckBox();
		jCheckBox9 = new javax.swing.JCheckBox();
		jLabel1 = new javax.swing.JLabel();
		scaleQcTextField = new javax.swing.JTextField();
		jLabel2 = new javax.swing.JLabel();
		cancelButton = new javax.swing.JButton();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

		textLabel.setText("Select Quality Control options:");

		nextButton.setText("Next");

		jCheckBox1.setSelected(true);
		jCheckBox1.setText("cropped image composite");
		jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jCheckBox1ActionPerformed(evt);
			}
		});

		jCheckBox2.setText("gray image composite");
		jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jCheckBox2ActionPerformed(evt);
			}
		});

		jCheckBox3.setText("thresholded image composite");
		jCheckBox3.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jCheckBox3ActionPerformed(evt);
			}
		});

		jCheckBox4.setText("skeleton image composite");
		jCheckBox4.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jCheckBox4ActionPerformed(evt);
			}
		});

		jCheckBox5.setText("thresholded on cropped");
		jCheckBox5.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jCheckBox5ActionPerformed(evt);
			}
		});

		jCheckBox6.setText("thresholded on gray overlay");
		jCheckBox6.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jCheckBox6ActionPerformed(evt);
			}
		});

		jCheckBox7.setText("skeleton on cropped overlay");
		jCheckBox7.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jCheckBox7ActionPerformed(evt);
			}
		});

		jCheckBox8.setText("skeleton on gray overlay");
		jCheckBox8.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jCheckBox8ActionPerformed(evt);
			}
		});

		jCheckBox9.setText("skeleton on thresholded");
		jCheckBox9.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jCheckBox9ActionPerformed(evt);
			}
		});

		jLabel1.setText("Set scale:");

		scaleQcTextField.setText("4");

		jLabel2.setText("The following four options work only on bio-ross server");

		cancelButton.setText("Cancel");

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(
				getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.LEADING)
												.addGroup(
														layout.createSequentialGroup()
																.addContainerGap()
																.addGroup(
																		layout.createParallelGroup(
																				javax.swing.GroupLayout.Alignment.LEADING)
																				.addComponent(
																						jLabel2,
																						javax.swing.GroupLayout.PREFERRED_SIZE,
																						432,
																						javax.swing.GroupLayout.PREFERRED_SIZE)
																				.addComponent(
																						textLabel)
																				.addComponent(
																						jCheckBox2)
																				.addComponent(
																						jCheckBox1)
																				.addComponent(
																						jCheckBox3)
																				.addComponent(
																						jCheckBox4)
																				.addComponent(
																						jCheckBox5)
																				.addComponent(
																						jCheckBox6)
																				.addComponent(
																						jCheckBox7)
																				.addComponent(
																						jCheckBox8)
																				.addComponent(
																						jCheckBox9)
																				.addComponent(
																						jLabel1)
																				.addComponent(
																						scaleQcTextField,
																						javax.swing.GroupLayout.PREFERRED_SIZE,
																						48,
																						javax.swing.GroupLayout.PREFERRED_SIZE)))
												.addGroup(
														javax.swing.GroupLayout.Alignment.TRAILING,
														layout.createSequentialGroup()
																.addGap(265,
																		265,
																		265)
																.addComponent(
																		nextButton,
																		javax.swing.GroupLayout.DEFAULT_SIZE,
																		87,
																		Short.MAX_VALUE)
																.addPreferredGap(
																		javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																.addComponent(
																		cancelButton,
																		javax.swing.GroupLayout.DEFAULT_SIZE,
																		86,
																		Short.MAX_VALUE)))
								.addContainerGap()));
		layout.setVerticalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addContainerGap()
								.addComponent(textLabel)
								.addGap(18, 18, 18)
								.addComponent(jCheckBox1)
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(jCheckBox2)
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(jCheckBox3)
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(jCheckBox4)
								.addGap(18, 18, 18)
								.addComponent(jLabel2,
										javax.swing.GroupLayout.PREFERRED_SIZE,
										15,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(jCheckBox5)
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(jCheckBox6)
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(jCheckBox7)
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(jCheckBox8)
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(jCheckBox9)
								.addGap(28, 28, 28)
								.addComponent(jLabel1)
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
								.addComponent(scaleQcTextField,
										javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(cancelButton)
												.addComponent(nextButton))
								.addContainerGap(18, Short.MAX_VALUE)));

		pack();
	}// </editor-fold>//GEN-END:initComponents

	private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jCheckBox1ActionPerformed
		cropped_img_composite = getCheckBoxValue(evt);
	}// GEN-LAST:event_jCheckBox1ActionPerformed

	private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jCheckBox2ActionPerformed
		gray_img_composite = getCheckBoxValue(evt);
	}// GEN-LAST:event_jCheckBox2ActionPerformed

	private void jCheckBox4ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jCheckBox4ActionPerformed
		skeleton_img_composite = getCheckBoxValue(evt);
	}// GEN-LAST:event_jCheckBox4ActionPerformed

	private void jCheckBox5ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jCheckBox5ActionPerformed
		thresholded_cropped_overlay = getCheckBoxValue(evt);
	}// GEN-LAST:event_jCheckBox5ActionPerformed

	private void jCheckBox6ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jCheckBox6ActionPerformed
		thresholded_gray_overlay = getCheckBoxValue(evt);
	}// GEN-LAST:event_jCheckBox6ActionPerformed

	private void jCheckBox7ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jCheckBox7ActionPerformed
		skeleton_cropped_overlay = getCheckBoxValue(evt);
	}// GEN-LAST:event_jCheckBox7ActionPerformed

	private void jCheckBox9ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jCheckBox9ActionPerformed
		skeleton_thresholded = getCheckBoxValue(evt);
	}// GEN-LAST:event_jCheckBox9ActionPerformed

	private void jCheckBox3ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jCheckBox3ActionPerformed
		thresholded_img_composite = getCheckBoxValue(evt);
	}// GEN-LAST:event_jCheckBox3ActionPerformed

	private void jCheckBox8ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jCheckBox8ActionPerformed
		skeleton_gray_overlay = getCheckBoxValue(evt);
	}// GEN-LAST:event_jCheckBox8ActionPerformed

	private int getCheckBoxValue(java.awt.event.ActionEvent evt) {
		int value = -1;
		JCheckBox chbx = (JCheckBox) evt.getSource();
		if (chbx.isSelected()) {
			value = 1;
		} else {
			value = 0;
		}

		return value;
	}

	public static ArrayList<Integer> getOptions() {

		ArrayList<Integer> options = new ArrayList<Integer>();
		options.add(Integer.valueOf(cropped_img_composite));
		options.add(Integer.valueOf(gray_img_composite));
		options.add(Integer.valueOf(thresholded_img_composite));
		options.add(Integer.valueOf(skeleton_img_composite));
		options.add(Integer.valueOf(thresholded_cropped_overlay));
		options.add(Integer.valueOf(thresholded_gray_overlay));
		options.add(Integer.valueOf(skeleton_cropped_overlay));
		options.add(Integer.valueOf(skeleton_gray_overlay));
		options.add(Integer.valueOf(skeleton_thresholded));

		return options;
	}

	public static void resetOptions() {
		cropped_img_composite = 1;
		gray_img_composite = 0;
		thresholded_img_composite = 0;
		skeleton_img_composite = 0;
		thresholded_cropped_overlay = 0;
		thresholded_gray_overlay = 0;
		skeleton_cropped_overlay = 0;
		skeleton_gray_overlay = 0;
		skeleton_thresholded = 0;
	}

	public static int getScaleQc() {

		return scaleQc;
	}

	// private String getHostName() {
	// String hostname = null;
	// try {
	// InetAddress addr = InetAddress.getLocalHost();
	// byte[] ipAddr = addr.getAddress();
	// hostname = addr.getHostName();
	// System.out.println("hostname="+hostname);
	// }
	// catch (UnknownHostException e) {
	// }
	// return hostname;
	// }

	// /**
	// * @param args the command line arguments
	// */
	// public static void main(String args[]) {
	// java.awt.EventQueue.invokeLater(new Runnable() {
	// public void run() {
	// new SelectQcOutputFrame().setVisible(true);
	// }
	// });
	// }

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton cancelButton;
	private javax.swing.JCheckBox jCheckBox1;
	private javax.swing.JCheckBox jCheckBox2;
	private javax.swing.JCheckBox jCheckBox3;
	private javax.swing.JCheckBox jCheckBox4;
	private javax.swing.JCheckBox jCheckBox5;
	private javax.swing.JCheckBox jCheckBox6;
	private javax.swing.JCheckBox jCheckBox7;
	private javax.swing.JCheckBox jCheckBox8;
	private javax.swing.JCheckBox jCheckBox9;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JButton nextButton;
	private javax.swing.JTextField scaleQcTextField;
	private javax.swing.JLabel textLabel;
	// End of variables declaration//GEN-END:variables

}
