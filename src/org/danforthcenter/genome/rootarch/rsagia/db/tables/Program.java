/*
 * This file is generated by jOOQ.
*/
package org.danforthcenter.genome.rootarch.rsagia.db.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.danforthcenter.genome.rootarch.rsagia.db.Indexes;
import org.danforthcenter.genome.rootarch.rsagia.db.Keys;
import org.danforthcenter.genome.rootarch.rsagia.db.RsaGia;
import org.danforthcenter.genome.rootarch.rsagia.db.tables.records.ProgramRecord;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Program extends TableImpl<ProgramRecord> {

    private static final long serialVersionUID = -325809037;

    /**
     * The reference instance of <code>rsa_gia.program</code>
     */
    public static final Program PROGRAM = new Program();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProgramRecord> getRecordType() {
        return ProgramRecord.class;
    }

    /**
     * The column <code>rsa_gia.program.program_id</code>.
     */
    public final TableField<ProgramRecord, Integer> PROGRAM_ID = createField("program_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>rsa_gia.program.name</code>.
     */
    public final TableField<ProgramRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>rsa_gia.program.description</code>.
     */
    public final TableField<ProgramRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.VARCHAR(100).defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>rsa_gia.program</code> table reference
     */
    public Program() {
        this(DSL.name("program"), null);
    }

    /**
     * Create an aliased <code>rsa_gia.program</code> table reference
     */
    public Program(String alias) {
        this(DSL.name(alias), PROGRAM);
    }

    /**
     * Create an aliased <code>rsa_gia.program</code> table reference
     */
    public Program(Name alias) {
        this(alias, PROGRAM);
    }

    private Program(Name alias, Table<ProgramRecord> aliased) {
        this(alias, aliased, null);
    }

    private Program(Name alias, Table<ProgramRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return RsaGia.RSA_GIA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PROGRAM_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ProgramRecord, Integer> getIdentity() {
        return Keys.IDENTITY_PROGRAM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ProgramRecord> getPrimaryKey() {
        return Keys.KEY_PROGRAM_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ProgramRecord>> getKeys() {
        return Arrays.<UniqueKey<ProgramRecord>>asList(Keys.KEY_PROGRAM_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Program as(String alias) {
        return new Program(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Program as(Name alias) {
        return new Program(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Program rename(String name) {
        return new Program(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Program rename(Name name) {
        return new Program(name, null);
    }
}
