/*
 * This file is generated by jOOQ.
*/
package org.danforthcenter.genome.rootarch.rsagia.db.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.danforthcenter.genome.rootarch.rsagia.db.Indexes;
import org.danforthcenter.genome.rootarch.rsagia.db.Keys;
import org.danforthcenter.genome.rootarch.rsagia.db.RsaGia;
import org.danforthcenter.genome.rootarch.rsagia.db.enums.DatasetCountConditionType;
import org.danforthcenter.genome.rootarch.rsagia.db.tables.records.DatasetCountRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DatasetCount extends TableImpl<DatasetCountRecord> {

    private static final long serialVersionUID = 323733270;

    /**
     * The reference instance of <code>rsa_gia.dataset_count</code>
     */
    public static final DatasetCount DATASET_COUNT = new DatasetCount();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DatasetCountRecord> getRecordType() {
        return DatasetCountRecord.class;
    }

    /**
     * The column <code>rsa_gia.dataset_count.dataset_id</code>.
     */
    public final TableField<DatasetCountRecord, Integer> DATASET_ID = createField("dataset_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>rsa_gia.dataset_count.program_id</code>.
     */
    public final TableField<DatasetCountRecord, Integer> PROGRAM_ID = createField("program_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>rsa_gia.dataset_count.condition_type</code>.
     */
    public final TableField<DatasetCountRecord, DatasetCountConditionType> CONDITION_TYPE = createField("condition_type", org.jooq.util.mysql.MySQLDataType.VARCHAR.asEnumDataType(org.danforthcenter.genome.rootarch.rsagia.db.enums.DatasetCountConditionType.class), this, "");

    /**
     * The column <code>rsa_gia.dataset_count.data_count</code>.
     */
    public final TableField<DatasetCountRecord, Integer> DATA_COUNT = createField("data_count", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>rsa_gia.dataset_count.red_flag_count</code>.
     */
    public final TableField<DatasetCountRecord, Integer> RED_FLAG_COUNT = createField("red_flag_count", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * Create a <code>rsa_gia.dataset_count</code> table reference
     */
    public DatasetCount() {
        this(DSL.name("dataset_count"), null);
    }

    /**
     * Create an aliased <code>rsa_gia.dataset_count</code> table reference
     */
    public DatasetCount(String alias) {
        this(DSL.name(alias), DATASET_COUNT);
    }

    /**
     * Create an aliased <code>rsa_gia.dataset_count</code> table reference
     */
    public DatasetCount(Name alias) {
        this(alias, DATASET_COUNT);
    }

    private DatasetCount(Name alias, Table<DatasetCountRecord> aliased) {
        this(alias, aliased, null);
    }

    private DatasetCount(Name alias, Table<DatasetCountRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return RsaGia.RSA_GIA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DATASET_COUNT_DATASET_COUNT_PROGRAM_PROGRAM_ID_FK, Indexes.DATASET_COUNT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DatasetCountRecord> getPrimaryKey() {
        return Keys.KEY_DATASET_COUNT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DatasetCountRecord>> getKeys() {
        return Arrays.<UniqueKey<DatasetCountRecord>>asList(Keys.KEY_DATASET_COUNT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<DatasetCountRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<DatasetCountRecord, ?>>asList(Keys.DATASET_COUNT_DATASET_DATASET_ID_FK, Keys.DATASET_COUNT_PROGRAM_PROGRAM_ID_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DatasetCount as(String alias) {
        return new DatasetCount(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DatasetCount as(Name alias) {
        return new DatasetCount(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DatasetCount rename(String name) {
        return new DatasetCount(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DatasetCount rename(Name name) {
        return new DatasetCount(name, null);
    }
}
