/*
 * This file is generated by jOOQ.
*/
package org.danforthcenter.genome.rootarch.rsagia.db.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.danforthcenter.genome.rootarch.rsagia.db.Indexes;
import org.danforthcenter.genome.rootarch.rsagia.db.Keys;
import org.danforthcenter.genome.rootarch.rsagia.db.RsaGia;
import org.danforthcenter.genome.rootarch.rsagia.db.tables.records.ExperimentRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Experiment extends TableImpl<ExperimentRecord> {

    private static final long serialVersionUID = -1561575128;

    /**
     * The reference instance of <code>rsa_gia.experiment</code>
     */
    public static final Experiment EXPERIMENT = new Experiment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ExperimentRecord> getRecordType() {
        return ExperimentRecord.class;
    }

    /**
     * The column <code>rsa_gia.experiment.experiment_id</code>.
     */
    public final TableField<ExperimentRecord, Integer> EXPERIMENT_ID = createField("experiment_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>rsa_gia.experiment.experiment_code</code>.
     */
    public final TableField<ExperimentRecord, String> EXPERIMENT_CODE = createField("experiment_code", org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>rsa_gia.experiment.organism_name</code>.
     */
    public final TableField<ExperimentRecord, String> ORGANISM_NAME = createField("organism_name", org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>rsa_gia.experiment.user_id</code>.
     */
    public final TableField<ExperimentRecord, Integer> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>rsa_gia.experiment.description</code>.
     */
    public final TableField<ExperimentRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * Create a <code>rsa_gia.experiment</code> table reference
     */
    public Experiment() {
        this(DSL.name("experiment"), null);
    }

    /**
     * Create an aliased <code>rsa_gia.experiment</code> table reference
     */
    public Experiment(String alias) {
        this(DSL.name(alias), EXPERIMENT);
    }

    /**
     * Create an aliased <code>rsa_gia.experiment</code> table reference
     */
    public Experiment(Name alias) {
        this(alias, EXPERIMENT);
    }

    private Experiment(Name alias, Table<ExperimentRecord> aliased) {
        this(alias, aliased, null);
    }

    private Experiment(Name alias, Table<ExperimentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return RsaGia.RSA_GIA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.EXPERIMENT_EXPERIMENT_EXPERIMENT_CODE_ORGANISM_NAME_UINDEX, Indexes.EXPERIMENT_EXPERIMENT_ORGANISM_ORGANISM_NAME_FK, Indexes.EXPERIMENT_EXPERIMENT_USER_USER_ID_FK, Indexes.EXPERIMENT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ExperimentRecord> getPrimaryKey() {
        return Keys.KEY_EXPERIMENT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ExperimentRecord>> getKeys() {
        return Arrays.<UniqueKey<ExperimentRecord>>asList(Keys.KEY_EXPERIMENT_PRIMARY, Keys.KEY_EXPERIMENT_EXPERIMENT_EXPERIMENT_CODE_ORGANISM_NAME_UINDEX);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ExperimentRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ExperimentRecord, ?>>asList(Keys.EXPERIMENT_ORGANISM_ORGANISM_NAME_FK, Keys.EXPERIMENT_USER_USER_ID_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Experiment as(String alias) {
        return new Experiment(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Experiment as(Name alias) {
        return new Experiment(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Experiment rename(String name) {
        return new Experiment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Experiment rename(Name name) {
        return new Experiment(name, null);
    }
}
