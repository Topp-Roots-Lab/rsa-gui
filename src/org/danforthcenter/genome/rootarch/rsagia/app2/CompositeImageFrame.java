/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * CompositeImageWorkerFrame.java
 *
 * Created on May 14, 2010, 2:25:57 PM
 */

package org.danforthcenter.genome.rootarch.rsagia.app2;

import java.awt.Dimension;
import java.beans.PropertyChangeEvent;
import java.util.ArrayList;

import org.danforthcenter.genome.rootarch.rsagia2.ApplicationManager;
import org.danforthcenter.genome.rootarch.rsagia2.Crop;
import org.danforthcenter.genome.rootarch.rsagia2.OutputInfo;
import org.danforthcenter.genome.rootarch.rsagia2.RsaImageSet;

/**
 *
 * @author bm93
 */
public class CompositeImageFrame extends javax.swing.JFrame implements
		java.beans.PropertyChangeListener {

	protected ApplicationManager am;
	protected Crop crop;
	protected boolean done;

	/** Creates new form CompositeImageWorkerFrame */
	public CompositeImageFrame(ArrayList<RsaImageSet> gps,
			ArrayList<OutputInfo> recropinputs, Crop crop, ApplicationManager am) {
		initComponents();

		this.gps = gps;
		this.recropinputs = recropinputs;
		this.crop = crop;
		this.am = am;
		done = false;
		inputsize = 0;
		if (recropinputs == null) {
			inputsize = gps.size();
		} else {
			inputsize = recropinputs.size();
		}
		progressLabel.setText("Creating 0 out of " + inputsize
				+ " thumbnail images.");
		ciw = new CompositeImageWorker(gps, recropinputs, new Dimension(512,
				512), crop, am);
		ciw.addPropertyChangeListener(this);
		ciw.execute();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		progressLabel = new javax.swing.JLabel();

		setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
		setTitle("Create Image Thumbnails");

		progressLabel.setText("Creating 1 out of 1 image thumbnails.");

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(
				getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				layout.createSequentialGroup().addContainerGap()
						.addComponent(progressLabel)
						.addContainerGap(146, Short.MAX_VALUE)));
		layout.setVerticalGroup(layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				layout.createSequentialGroup().addContainerGap()
						.addComponent(progressLabel)
						.addContainerGap(130, Short.MAX_VALUE)));

		pack();
	}// </editor-fold>//GEN-END:initComponents

	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {
		// java.awt.EventQueue.invokeLater(new Runnable() {
		// public void run() {
		// new CompositeImageFrame().setVisible(true);
		// }
		// });
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JLabel progressLabel;
	// End of variables declaration//GEN-END:variables

	protected ArrayList<RsaImageSet> gps;
	protected ArrayList<OutputInfo> recropinputs;
	protected ArrayList<OutputInfo> outputs;
	protected CompositeImageWorker ciw;
	protected int inputsize;

	public void propertyChange(PropertyChangeEvent evt) {
		if (evt.getSource() == ciw && evt.getPropertyName().equals("progress")) {
			int i = (Integer) evt.getNewValue();
			if (i == inputsize) {
				progressLabel.setText("Creating thumbnails complete.");
				outputs = ciw.getOutputs();
				boolean b = done;
				done = true;
				this.firePropertyChange("done", b, done);
			} else {
				progressLabel.setText("Creating " + i + " out of " + inputsize
						+ " thumbnail images.");
			}
		}
	}

	public ArrayList<OutputInfo> getOutputs() {
		return outputs;
	}

	public ArrayList<OutputInfo> getRecropInputs() {
		return recropinputs;
	}

	public boolean isRecrop() {
		return crop.getRecrop();
	}
}
