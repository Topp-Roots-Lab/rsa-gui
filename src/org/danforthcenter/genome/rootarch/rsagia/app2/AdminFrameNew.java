package org.danforthcenter.genome.rootarch.rsagia.app2;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.lang.management.ManagementFactory;
import com.sun.management.OperatingSystemMXBean;

/**
 * Created by Feray Demirci on 5/7/2017.
 */
public class AdminFrameNew extends JFrame implements ActionListener {

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new GridBagLayout());
        panel1.setPreferredSize(new Dimension(350, 230));
        label1 = new JLabel();
        label1.setText("Total CPU Number");
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(10, 0, 10, 0);
        panel1.add(label1, gbc);
        label2 = new JLabel();
        label2.setText("Process Load %");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(10, 0, 10, 0);
        panel1.add(label2, gbc);
        label5 = new JLabel();
        label5.setText("0");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        panel1.add(label5, gbc);
        label6 = new JLabel();
        label6.setText("0");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 1;
        gbc.anchor = GridBagConstraints.WEST;
        panel1.add(label6, gbc);
        label3 = new JLabel();
        label3.setHorizontalTextPosition(2);
        label3.setText("Recommended max # of \nparallel processes");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(10, 0, 10, 0);
        panel1.add(label3, gbc);
        label7 = new JLabel();
        label7.setText("0");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 2;
        gbc.anchor = GridBagConstraints.WEST;
        panel1.add(label7, gbc);
        label4 = new JLabel();
        label4.setText("Enter preferred max # of parallel processes:");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 3;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(10, 0, 10, 10);
        panel1.add(label4, gbc);
        closeButton = new JButton();
        closeButton.setText("OK");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 5;
        gbc.gridwidth = 2;
        gbc.insets = new Insets(10, 0, 10, 0);
        panel1.add(closeButton, gbc);
        maxProcessesField = new JTextField();
        maxProcessesField.setPreferredSize(new Dimension(30, 17));
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 3;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel1.add(maxProcessesField, gbc);
        final JLabel label8 = new JLabel();
        label8.setText("(The new setting is kept only for the current session.)");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 4;
        gbc.gridwidth = 2;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(10, 0, 10, 0);
        panel1.add(label8, gbc);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }

    public static class AdminSettings {

        static int MaxProcessesDefault = 4;
        static int MaxProcesses = Integer.MIN_VALUE;

        public static int getMaxProcessesDefault() {
            return MaxProcessesDefault;
        }

        public static int getMaxProcesses() {
            return MaxProcesses;
        }

        public static void setMaxProcesses(int value) {
            MaxProcesses = value;
        }

        public AdminSettings() {
        }
    }

    private Timer timer;
    private OperatingSystemMXBean osmxb;

    private JButton closeButton;
    private JLabel label1;
    private JLabel label2;
    private JLabel label3;
    private JLabel label4;
    private JLabel label6;
    private JLabel label7;
    private JLabel label5;
    private JPanel panel1;
    private JTextField maxProcessesField;

    public AdminFrameNew() {
        $$$setupUI$$$();
        initiliazeMaxProcessesField();
        this.osmxb = (OperatingSystemMXBean) ManagementFactory.getOperatingSystemMXBean();

        setSystemLoadFields();

        timer = new Timer(2000, this);
        timer.setInitialDelay(0);

        closeButton.addActionListener(this);
        this.getContentPane().add(this.panel1);
        pack();
    }

    public void dispose() {
        timer.stop();
        super.dispose();
    }

    public void setVisible(boolean b) {
        if (b == true) {
            timer.start();
        }
        super.setVisible(b);
    }

    private void initiliazeMaxProcessesField() {
        int MaxProcessesDefault = AdminSettings.getMaxProcessesDefault();
        if (AdminSettings.getMaxProcesses() == Integer.MIN_VALUE) {
            AdminSettings.setMaxProcesses(MaxProcessesDefault);
            maxProcessesField.setText(String.valueOf(MaxProcessesDefault));
            maxProcessesField.requestFocus();
        }
    }

    private void setSystemLoadFields() {
        int processors = this.osmxb.getAvailableProcessors();
        double load = this.osmxb.getSystemCpuLoad();
        double freeProcessors = processors * (1 - load);
        int recommendedParallelization = (int) Math.round(freeProcessors / 2);
        if (recommendedParallelization == 0) {
            recommendedParallelization = 1;
        }
        label5.setText(String.valueOf(processors));
        label6.setText(String.valueOf(Math.round(load * 100)) + "%");
        label7.setText(String.valueOf(recommendedParallelization));
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == timer) {
            setSystemLoadFields();
        } else if (e.getSource() == closeButton) {
            if (verify()) {
                String s = maxProcessesField.getText();
                AdminSettings.setMaxProcesses(Integer.parseInt(s));
                dispose();
            } else {
                String Msg = "Put a positive integer";
                JOptionPane.showMessageDialog(this, Msg);
            }
        }
    }

    private boolean verify() {
        String s = maxProcessesField.getText();
        return isParsableToInt(s) && Integer.parseInt(s) > 0;
    }

    private static boolean isParsableToInt(String i) {
        try {
            Integer.parseInt(i);
            return true;
        } catch (NumberFormatException exp) {
            return false;
        }
    }

    private void createUIComponents() {
        // TODO: place custom component creation code here
    }
}
